<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 相惜恨离</title>
    <link>https://xiangxihenli.github.io/post/</link>
    <description>Recent content in Posts on 相惜恨离</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 23 Apr 2020 08:31:02 +0800</lastBuildDate>
    
	<atom:link href="https://xiangxihenli.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Laravel 队列分析</title>
      <link>https://xiangxihenli.github.io/post/queue-redis-and-others/</link>
      <pubDate>Thu, 23 Apr 2020 08:31:02 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/queue-redis-and-others/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何创建一个秒杀系统</title>
      <link>https://xiangxihenli.github.io/post/how-to-build-a-seckill-system/</link>
      <pubDate>Wed, 15 Apr 2020 14:00:42 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/how-to-build-a-seckill-system/</guid>
      <description>第一步 将秒杀系统独立出来，部署在独立的服务器集群上 热点数据进行缓存(库存数据等) 防止机器抢单，添加验证码或者直接限制访问请求次数 第二步 页面进行动静分离，秒杀不刷新页面，通过ajax进行秒杀 增加限流保护 动静处理的优化 静态数据要尽量缓存到离用户靠近的地方 1. 用户浏览器缓存 2. CDN服务器</description>
    </item>
    
    <item>
      <title>队列基础知识01</title>
      <link>https://xiangxihenli.github.io/post/queue-basic01/</link>
      <pubDate>Wed, 15 Apr 2020 13:56:21 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/queue-basic01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>高并发学习01</title>
      <link>https://xiangxihenli.github.io/post/high-concurrency-basic01/</link>
      <pubDate>Wed, 15 Apr 2020 13:55:38 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/high-concurrency-basic01/</guid>
      <description>高并发系统的几大方向 请求数据尽量少，从而减少cpu消耗 访问路径尽量短，介绍节点消耗 强依赖尽量少，减少加载时间 不能依靠单点，要有备份 减少额外请求，减少加载时间</description>
    </item>
    
    <item>
      <title>深入MySQL基础学习03--事务、锁</title>
      <link>https://xiangxihenli.github.io/post/mysql-basic03/</link>
      <pubDate>Mon, 13 Apr 2020 11:56:43 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/mysql-basic03/</guid>
      <description>数据库事务 数据库事务是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。 概念类似于操作系统的原语，指一堆SQL，要么全部执行，要么就不执行。 数据库事务通常包含了一个序列的对数据库的读/写操作。包含有以下两个目的： 为数据库操作序列提供了一个从失败中恢复到正常状</description>
    </item>
    
    <item>
      <title>学习Redis01</title>
      <link>https://xiangxihenli.github.io/post/learn-redis01/</link>
      <pubDate>Fri, 10 Apr 2020 09:44:55 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/learn-redis01/</guid>
      <description>Redis是什么 Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久化的高性能键值对数据库。 Redis支持的常用5种数据类型指的是value类型，分别为：字符串String、列表List、哈希Hash、集合Set、有序集合Zset， 但是Redis后续又丰富了几种</description>
    </item>
    
    <item>
      <title>深入MySQL基础学习02--索引</title>
      <link>https://xiangxihenli.github.io/post/mysql-basic02/</link>
      <pubDate>Thu, 09 Apr 2020 15:46:41 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/mysql-basic02/</guid>
      <description>InnoDB的索引分类 InnoDB支持一下几种索引： B+ Tree 索引 全文索引 哈希索引 本文重点讲述一下B+ Tree索引 和 哈希索引。 至于全文索引，因为MySQL本身在全文索引上就没有优势，所以暂且放到之后ElasticSearch的学习中再去研究。 索引的目的 实际上说起索引，很多文章和书，都会</description>
    </item>
    
    <item>
      <title>深入MySQL基础学习01--存储</title>
      <link>https://xiangxihenli.github.io/post/mysql-basic01/</link>
      <pubDate>Fri, 03 Apr 2020 22:19:13 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/mysql-basic01/</guid>
      <description>简介 接下来想学习一下MySQL相关的一些基础知识。主要涉及MySQL的存储、索引、事务和锁相关的知识。 用了很久的MySQL，对于MySQL的知识还是始于应用，终于应用。而且只是知道一个大概。 接下来这个系列，我想好好稍微深入的了解MySQL的一些基础知识，为以后深入学习数据库的原理</description>
    </item>
    
    <item>
      <title>PHP基础知识学习(04)--Array</title>
      <link>https://xiangxihenli.github.io/post/php-basic04/</link>
      <pubDate>Thu, 02 Apr 2020 16:07:19 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/php-basic04/</guid>
      <description>数组 数组是PHP中非常强大、灵活的一种数据类型，它的底层实现为散列表(HashTable，也称作：哈希表)， 除了我们熟悉的PHP用户空间的Array类型之外，内核中也随处用到散列表，比如函数、类、常量、已include文件的索引表、 全局符号表等都用的HashTable存储。 散列表</description>
    </item>
    
    <item>
      <title>PHP基础知识学习(03)--变量</title>
      <link>https://xiangxihenli.github.io/post/php-basic03/</link>
      <pubDate>Thu, 02 Apr 2020 09:32:12 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/php-basic03/</guid>
      <description>变量 大多数编程语言都有变量，变量通常有三个属性，变量名、变量值、变量类型。PHP是一种弱类型语言，变量可以在实际处理过程中进行隐式的转换。这一特性让开发变得十分便利。 在官方的PHP实现内部，所有变量使用同一种结构zval来保存，这个结构能表示PHP中的各种数据类型。 不仅包含变量的</description>
    </item>
    
    <item>
      <title>Apache三种工作模式</title>
      <link>https://xiangxihenli.github.io/post/http-server-apache-work-mode/</link>
      <pubDate>Wed, 01 Apr 2020 12:57:01 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/http-server-apache-work-mode/</guid>
      <description>摘要 Apache中主要有三种多进程的工作模式，分别是prefork，Worker，Event。 具体运行哪种模式，可以到Apache的配置文件中查询。 Prefork MPM Prefork MPM实现了一个非线程的、预派生的web服务器。它在Apache启动之初，就先预派生一些子进程，然后等待连接；可以减少频繁创建</description>
    </item>
    
    <item>
      <title>PHP基础知识学习(02)--SAPI</title>
      <link>https://xiangxihenli.github.io/post/php-basic02/</link>
      <pubDate>Wed, 01 Apr 2020 12:57:01 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/php-basic02/</guid>
      <description>摘要 在了解了PHP的生命周期后，再来详细了解一下SAPI是如何工作的。接下来从PHP主要的几个应用场景下去了解SAPI。 比如Apache，CLI，CGI，FastCGI，FPM。 说实话这几个概念之前可是困扰了我很久。 Apache Apache是一个开源的Web服务器。可以支持多种特性，大多通</description>
    </item>
    
    <item>
      <title>PHP基础知识学习(01)--生命周期</title>
      <link>https://xiangxihenli.github.io/post/php-basic01/</link>
      <pubDate>Tue, 31 Mar 2020 19:05:23 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/php-basic01/</guid>
      <description>PHP架构 PHP架构图： SAPI Server Application Programing Interface，PHP与外部应用交换接口。 常见有给Apache的mod_php5，mode_php7，CGI，IIS的ISAPI，还有Shell的CLI。 Zend Engine PHP的核心部分，包括编译器和执行器两部分。负责编译PHP语法为字节码，执行字节码。 P</description>
    </item>
    
    <item>
      <title>常见的5种IO模型的比较</title>
      <link>https://xiangxihenli.github.io/post/five-io-model/</link>
      <pubDate>Tue, 31 Mar 2020 19:05:23 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/five-io-model/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PHP中高级程序员面经</title>
      <link>https://xiangxihenli.github.io/post/interview01/</link>
      <pubDate>Fri, 13 Mar 2020 11:32:24 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/interview01/</guid>
      <description>简介 作为一个机械半路转行的程序员，无时无刻都会感觉到要学的东西太多了。 前三年在一家技术栈比较陈旧的公司，主要的工作都花在了业务上面。 结果出来面试之后，才发现原本就没有基础的我，和整个市场显得格格不入。 还好至少有个本科学历，因此投简历还能有幸拿到面试机会。当然整个面试过程就不是很友</description>
    </item>
    
    <item>
      <title>数据结构和算法--排序(05)</title>
      <link>https://xiangxihenli.github.io/post/algorithm05-learn-easy-sort/</link>
      <pubDate>Mon, 09 Mar 2020 13:53:49 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/algorithm05-learn-easy-sort/</guid>
      <description>常见的排序 常见的排序排序算法有冒泡、插入、选择、归并、快速、桶、计数、基数排序。 排序算法 时间复杂度 是否基于比较 冒泡、插入、选择 O(n2) 是 归并、快速 O(logn) 是 桶、计数、基数 O(logn) 否 冒泡排序 算法： 每次比较相邻的两个元素，将较大的元素移动到固定一侧。依次比较完所有元素，那固定的那一侧现在就是所有元素中</description>
    </item>
    
    <item>
      <title>数据结构和算法--队列(04)</title>
      <link>https://xiangxihenli.github.io/post/algorithm04-learn-queue/</link>
      <pubDate>Mon, 09 Mar 2020 11:53:49 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/algorithm04-learn-queue/</guid>
      <description>什么是队列 堆栈（stack），是一种运算受限的线性表。只允许在有序的线性表集合的前端进行删除操作，而在表的后端进行插入操作。按照先进先出(FIFO, First In First Out)的原理运作。 操作方式和堆栈类似，区别在于队列只允许新数据在后端添加。 可以使用数组，也可以使用链表实现。 使用数组实现的叫</description>
    </item>
    
    <item>
      <title>数据结构和算法--堆栈(03)</title>
      <link>https://xiangxihenli.github.io/post/algorithm03-learn-stack/</link>
      <pubDate>Mon, 09 Mar 2020 10:53:49 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/algorithm03-learn-stack/</guid>
      <description>什么是堆栈 堆栈（stack），是一种运算受限的线性表。只允许在有序的线性表集合的一端(栈顶或者堆叠顶,top)添加数据和移除数据。因而按照后进先出(LIFO, Last In First Out)的原理运作。 栈通常用数组或者链表来实现。 堆栈的特性 栈的特点： 先进后出，后进先出 除头尾节点之外，每个元素有一个</description>
    </item>
    
    <item>
      <title>数据结构和算法--链表(02)</title>
      <link>https://xiangxihenli.github.io/post/algorithm02-learn-linked-list/</link>
      <pubDate>Sun, 01 Mar 2020 12:53:49 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/algorithm02-learn-linked-list/</guid>
      <description>什么是链表 链表（Linked list），是一组物理存储单元非连续、非顺序的线性表存储结构。元素的连接顺序通过链表中的指针链接次序实现。链表结构通常有一连串节点组成，每个节点包含任意的实例数据(data fields) 和一个或者两个用于指向上一个或下一个节点位置的链接。 常见的链表类型:单向链表、</description>
    </item>
    
    <item>
      <title>数据结构和算法--数组(01)</title>
      <link>https://xiangxihenli.github.io/post/algorithm01-learn-array/</link>
      <pubDate>Sat, 29 Feb 2020 12:53:49 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/algorithm01-learn-array/</guid>
      <description>什么是数组 数组（Array），用一组连续的内存空间，存储具有相同类型的元素的线性表数据结构。 数组的特性 数组两个特性：连续内存空间、相同类型数据。 连续内存空间的好处是，可以根据索引进行内存地址的直接寻址。 这样记住首个元素的地址，就可以根据索引直接计算出其他元素对应的地址。 相同类型数</description>
    </item>
    
    <item>
      <title>博客开通啦！</title>
      <link>https://xiangxihenli.github.io/post/my-first-post/</link>
      <pubDate>Thu, 27 Feb 2020 20:32:24 +0800</pubDate>
      
      <guid>https://xiangxihenli.github.io/post/my-first-post/</guid>
      <description>很早之前就想搭建自己的个人blog，因为工作业务原因，没有把时间安排在个人成长这些事情上面。 但是，经历了入行的这三年，越发的觉得技术实力的成长是离不开思考、实践和总结的。 所以，现在新建立起我的个人blog。 blog使用的比较简单的实现 Hugo + GitHub Pages. 未来打算自己学习过程中总结性的内容和一</description>
    </item>
    
  </channel>
</rss>